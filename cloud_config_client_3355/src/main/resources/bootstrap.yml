server:
  port: 3355

spring:
  application:
    name: cloud-config-client
  cloud:
    config:
# 注意：这里配置和 config server 端不同；这里的命名规则侧面也反映了 config server 端的命名规则是有章可循的，需要按照 开发文档 的要求进行命名
# 按照以下规则命名后，最终昂 config client 端会去读取的配置文件地址为： http://config-3344.com:3344/master/config-dev.yml，
# 也就是我们在 config server 端测试的地址
      label: master # 分支名称
      name: config # 配置文件名称
      profile: dev # 读取后缀名称 上诉三个综合：master分支上 config-dev.yml 的配置文件被读取；
      uri: http://config-3344.com:3344 # 配置中心地址

eureka:
  client:
    #  表示是否将自己注册进EurekaServer，默认为true
    register-with-eureka: true
    #    是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetch-registry: true
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/
  instance:
    #    自定义EurekaServer端显示当前应用的名称
    instance-id: cloud-config-client
    #    将鼠标放置到EurekaServer网页端的注册节点时候会显示当前应用的IP地址信息
    prefer-ip-address: true

# 暴露监控端点，config client配置监控远端 config-*.yml 信息然后动态更新
management:
  endpoints:
    web:
      exposure:
        include: "*"
